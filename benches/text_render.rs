use criterion::{Criterion, criterion_group, criterion_main};
use launchr::{
    render::{DrawHandle, OnwedBuffer},
    ui::*,
};
use std::hint::black_box;

const WIDTH: u32 = 1920;
const HEIGHT: u32 = 1080;

fn create_ui() -> DynWidget {
    let mut texts = Vec::new();
    texts.push(
        container(
            TextBuilder::new(TEXT)
                .font(Some("Noto Sans"))
                .size(24.0)
                .build(),
        )
        .width(Length::Fill)
        .height(Length::Fill),
    );
    let mut root = container(column(texts))
        .width(Length::Fill)
        .height(Length::Fill)
        .bg(Color::from_rgba(50, 50, 50, 255))
        .padding_all(18)
        .into_dyn();

    root.layout(UVec2::new(WIDTH, HEIGHT));
    root
}

fn render_ui(root: &DynWidget, draw_handle: &mut DrawHandle) {
    root.render(UVec2::ZERO, draw_handle);
}

fn bench_text_render(c: &mut Criterion) {
    let root = create_ui();
    let mut draw_handle: DrawHandle = DrawHandle::from(OnwedBuffer::new(WIDTH, HEIGHT));
    render_ui(&root, &mut draw_handle);

    let bytes = draw_handle.get_bytes();
    image::ImageBuffer::from_fn(WIDTH, HEIGHT, |x, y| {
        let i = (x + y * WIDTH) as usize * 4;
        let mut color_arr = [0u8; 4];
        color_arr.copy_from_slice(&bytes[i..i + 4]);
        image::Rgba(color_arr)
    })
    .save("text_render.png")
    .unwrap();

    c.bench_function("text_render", |b| {
        b.iter(|| {
            render_ui(&root, black_box(&mut draw_handle));
        });
    });
}

criterion_group! {
    name = text_render;
    config = Criterion::default().sample_size(10);
    targets = bench_text_render
}
criterion_main!(text_render);

const TEXT: &str = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

ЁЯШАЁЯШАЁЯША


ржзрж╛рж░рж╛ рзз рж╕ржорж╕рзНржд ржорж╛ржирзБрж╖ рж╕рзНржмрж╛ржзрзАржиржнрж╛ржмрзЗ рж╕ржорж╛ржи ржорж░рзНржпрж╛ржжрж╛ ржПржмржВ ржЕржзрж┐ржХрж╛рж░ ржирж┐ржпрж╝рзЗ ржЬржирзНржоржЧрзНрж░рж╣ржг ржХрж░рзЗред рждрж╛ржБржжрзЗрж░ ржмрж┐ржмрзЗржХ ржПржмржВ ржмрзБржжрзНржзрж┐ ржЖржЫрзЗ; рж╕рзБрждрж░рж╛ржВ рж╕ржХрж▓рзЗрж░ржЗ ржПржХрзЗ ржЕржкрж░рзЗрж░ ржкрзНрж░рждрж┐ ржнрзНрж░рж╛рждрзГрждрзНржмрж╕рзБрж▓ржн ржоржирзЛржнрж╛ржм ржирж┐ржпрж╝рзЗ ржЖржЪрж░ржг ржХрж░рж╛ ржЙржЪрж┐рждред

I want more terminals to be able to handle ZWJ sequence emoji characters. For example, the service dog emoji ЁЯРХтАНЁЯж║ is actually 3 Unicode characters. Kitty handles this fairly well. All VTE-based terminals, however, show 'ЁЯР╢ЁЯж║'.

╫Ы╫Р╫й╫и ╫Ф╫в╫Х╫Ь╫Э ╫и╫Х╫ж╫Ф ╫Ь╫У╫С╫и, ╫Ф╫Х╫Р ╫Ю╫У╫С╫и ╫С╓╛Unicode. ╫Ф╫Щ╫и╫й╫Ю╫Х ╫Ы╫в╫к ╫Ь╫Ы╫а╫б Unicode ╫Ф╫С╫Щ╫а╫Ь╫Р╫Х╫Ю╫Щ ╫Ф╫в╫й╫Щ╫и╫Щ, ╫й╫Щ╫Щ╫в╫и╫Ъ ╫С╫Щ╫Я ╫Ф╫к╫Р╫и╫Щ╫Ы╫Щ╫Э 12╓╛10 ╫С╫Ю╫и╫е 1997, ╫С╓░╓╝╫Ю╓╕╫Щ╓░╫Щ╫а╓░╫е ╫й╫С╫Т╫и╫Ю╫а╫Щ╫Ф. ╫С╫Ы╫а╫б ╫Щ╫й╫к╫к╫д╫Х ╫Ю╫Х╫Ю╫Ч╫Щ╫Э ╫Ю╫Ы╫Ь ╫в╫а╫д╫Щ ╫Ф╫к╫в╫й╫Щ╫Щ╫Ф ╫С╫а╫Х╫й╫Р ╫Ф╫Р╫Щ╫а╫Ш╫и╫а╫Ш ╫Ф╫в╫Х╫Ь╫Ю╫Щ ╫Х╫Ф╓╛Unicode, ╫С╫Ф╫к╫Р╫Ю╫Ф ╫Ь╫й╫Х╫з ╫Ф╫С╫Щ╫а╫Ь╫Р╫Х╫Ю╫Щ ╫Х╫Ф╫Ю╫з╫Х╫Ю╫Щ, ╫С╫Щ╫Щ╫й╫Х╫Э Unicode ╫С╫Ю╫в╫и╫Ы╫Х╫к ╫Ф╫д╫в╫Ь╫Ф ╫Х╫С╫Щ╫Щ╫й╫Х╫Ю╫Щ╫Э, ╫С╫Т╫Х╫д╫а╫Щ╫Э, ╫С╫д╫и╫Щ╫б╫к ╫Ш╫з╫б╫Ш ╫Х╫С╫Ю╫Ч╫й╫Х╫С ╫и╫С╓╛╫Ь╫й╫Х╫а╫Щ.

Many computer programs fail to display bidirectional text correctly. For example, this page is mostly LTR English script, and here is the RTL Hebrew name Sarah: ╫й╫и╫Ф, spelled sin (╫й) on the right, resh (╫и) in the middle, and heh (╫Ф) on the left.
This is some text.
";
